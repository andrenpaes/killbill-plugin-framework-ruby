###################################################################################
#                                                                                 #
#                   Copyright 2010-2013 Ning, Inc.                                #
#                                                                                 #
#      Ning licenses this file to you under the Apache License, version 2.0       #
#      (the "License"); you may not use this file except in compliance with the   #
#      License.  You may obtain a copy of the License at:                         #
#                                                                                 #
#          http://www.apache.org/licenses/LICENSE-2.0                             #
#                                                                                 #
#      Unless required by applicable law or agreed to in writing, software        #
#      distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  #
#      WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  #
#      License for the specific language governing permissions and limitations    #
#      under the License.                                                         #
#                                                                                 #
###################################################################################


#
#                       DO NOT EDIT!!!
#    File automatically generated by killbill-java-parser (git@github.com:killbill/killbill-java-parser.git)
#


module Killbill
  module Plugin
    module Api

      java_package 'com.ning.billing.invoice.api'
      class InvoiceUserApi

        include com.ning.billing.invoice.api.InvoiceUserApi

        def initialize(real_java_api)
          @real_java_api = real_java_api
        end


        java_signature 'Java::java.util.List getInvoicesByAccount(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_invoices_by_account(accountId, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_invoices_by_account(accountId, context)
          # conversion for res [type = java.util.List]
          tmp = []
          res.each do |m|
            # conversion for m [type = com.ning.billing.invoice.api.Invoice]
            m = Killbill::Plugin::Model::Invoice.to_ruby(m) if !m.nil?
            tmp << m
          end
          res = tmp
          return res
        end

        java_signature 'Java::java.math.BigDecimal getAccountBalance(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_account_balance(accountId, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_account_balance(accountId, context)
          # conversion for res [type = java.math.BigDecimal]
          res = res.nil? ? 0 : res.multiply(java.math.BigDecimal.valueOf(100)).to_s.to_i
          return res
        end

        java_signature 'Java::java.math.BigDecimal getAccountCBA(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_account_cba(accountId, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_account_cba(accountId, context)
          # conversion for res [type = java.math.BigDecimal]
          res = res.nil? ? 0 : res.multiply(java.math.BigDecimal.valueOf(100)).to_s.to_i
          return res
        end

        java_signature 'Java::com.ning.billing.invoice.api.Invoice getInvoice(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_invoice(invoiceId, context)
          if !invoiceId.nil? && invoiceId.respond_to? :to_java
            invoiceId = invoiceId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.get_invoice(invoiceId, context)
            # conversion for res [type = com.ning.billing.invoice.api.Invoice]
            res = Killbill::Plugin::Model::Invoice.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.invoice.api.Invoice getInvoiceByNumber(Java::java.lang.Integer, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_invoice_by_number(number, context)
          if !number.nil? && number.respond_to? :to_java
            number = number.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.get_invoice_by_number(number, context)
            # conversion for res [type = com.ning.billing.invoice.api.Invoice]
            res = Killbill::Plugin::Model::Invoice.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::java.util.Collection getUnpaidInvoicesByAccountId(Java::java.util.UUID, Java::org.joda.time.LocalDate, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_unpaid_invoices_by_account_id(accountId, upToDate, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !upToDate.nil? && upToDate.respond_to? :to_java
            upToDate = upToDate.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_unpaid_invoices_by_account_id(accountId, upToDate, context)
          # conversion for res [type = java.util.Collection]
          tmp = []
          res.each do |m|
            # conversion for m [type = com.ning.billing.invoice.api.Invoice]
            m = Killbill::Plugin::Model::Invoice.to_ruby(m) if !m.nil?
            tmp << m
          end
          res = tmp
          return res
        end

        java_signature 'Java::com.ning.billing.invoice.api.Invoice triggerInvoiceGeneration(Java::java.util.UUID, Java::org.joda.time.LocalDate, Java::boolean, Java::com.ning.billing.util.callcontext.CallContext)'
        def trigger_invoice_generation(accountId, targetDate, dryRun, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !targetDate.nil? && targetDate.respond_to? :to_java
            targetDate = targetDate.to_java
          end

          if !dryRun.nil? && dryRun.respond_to? :to_java
            dryRun = dryRun.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.trigger_invoice_generation(accountId, targetDate, dryRun, context)
            # conversion for res [type = com.ning.billing.invoice.api.Invoice]
            res = Killbill::Plugin::Model::Invoice.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::void tagInvoiceAsWrittenOff(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.CallContext)'
        def tag_invoice_as_written_off(invoiceId, context)
          if !invoiceId.nil? && invoiceId.respond_to? :to_java
            invoiceId = invoiceId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          @real_java_api.tag_invoice_as_written_off(invoiceId, context)
        end

        java_signature 'Java::void tagInvoiceAsNotWrittenOff(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.CallContext)'
        def tag_invoice_as_not_written_off(invoiceId, context)
          if !invoiceId.nil? && invoiceId.respond_to? :to_java
            invoiceId = invoiceId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          @real_java_api.tag_invoice_as_not_written_off(invoiceId, context)
        end

        java_signature 'Java::com.ning.billing.invoice.api.InvoiceItem getExternalChargeById(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_external_charge_by_id(externalChargeId, context)
          if !externalChargeId.nil? && externalChargeId.respond_to? :to_java
            externalChargeId = externalChargeId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.get_external_charge_by_id(externalChargeId, context)
            # conversion for res [type = com.ning.billing.invoice.api.InvoiceItem]
            res = Killbill::Plugin::Model::InvoiceItem.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.invoice.api.InvoiceItem insertExternalCharge(Java::java.util.UUID, Java::java.math.BigDecimal, Java::java.lang.String, Java::org.joda.time.LocalDate, Java::com.ning.billing.catalog.api.Currency, Java::com.ning.billing.util.callcontext.CallContext)'
        def insert_external_charge(accountId, amount, description, effectiveDate, currency, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !amount.nil? && amount.respond_to? :to_java
            amount = amount.to_java
          end

          if !description.nil? && description.respond_to? :to_java
            description = description.to_java
          end

          if !effectiveDate.nil? && effectiveDate.respond_to? :to_java
            effectiveDate = effectiveDate.to_java
          end

          if !currency.nil? && currency.respond_to? :to_java
            currency = currency.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.insert_external_charge(accountId, amount, description, effectiveDate, currency, context)
            # conversion for res [type = com.ning.billing.invoice.api.InvoiceItem]
            res = Killbill::Plugin::Model::InvoiceItem.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.invoice.api.InvoiceItem insertExternalChargeForBundle(Java::java.util.UUID, Java::java.util.UUID, Java::java.math.BigDecimal, Java::java.lang.String, Java::org.joda.time.LocalDate, Java::com.ning.billing.catalog.api.Currency, Java::com.ning.billing.util.callcontext.CallContext)'
        def insert_external_charge_for_bundle(accountId, bundleId, amount, description, effectiveDate, currency, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !bundleId.nil? && bundleId.respond_to? :to_java
            bundleId = bundleId.to_java
          end

          if !amount.nil? && amount.respond_to? :to_java
            amount = amount.to_java
          end

          if !description.nil? && description.respond_to? :to_java
            description = description.to_java
          end

          if !effectiveDate.nil? && effectiveDate.respond_to? :to_java
            effectiveDate = effectiveDate.to_java
          end

          if !currency.nil? && currency.respond_to? :to_java
            currency = currency.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.insert_external_charge_for_bundle(accountId, bundleId, amount, description, effectiveDate, currency, context)
            # conversion for res [type = com.ning.billing.invoice.api.InvoiceItem]
            res = Killbill::Plugin::Model::InvoiceItem.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.invoice.api.InvoiceItem insertExternalChargeForInvoice(Java::java.util.UUID, Java::java.util.UUID, Java::java.math.BigDecimal, Java::java.lang.String, Java::org.joda.time.LocalDate, Java::com.ning.billing.catalog.api.Currency, Java::com.ning.billing.util.callcontext.CallContext)'
        def insert_external_charge_for_invoice(accountId, invoiceId, amount, description, effectiveDate, currency, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !invoiceId.nil? && invoiceId.respond_to? :to_java
            invoiceId = invoiceId.to_java
          end

          if !amount.nil? && amount.respond_to? :to_java
            amount = amount.to_java
          end

          if !description.nil? && description.respond_to? :to_java
            description = description.to_java
          end

          if !effectiveDate.nil? && effectiveDate.respond_to? :to_java
            effectiveDate = effectiveDate.to_java
          end

          if !currency.nil? && currency.respond_to? :to_java
            currency = currency.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.insert_external_charge_for_invoice(accountId, invoiceId, amount, description, effectiveDate, currency, context)
            # conversion for res [type = com.ning.billing.invoice.api.InvoiceItem]
            res = Killbill::Plugin::Model::InvoiceItem.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.invoice.api.InvoiceItem insertExternalChargeForInvoiceAndBundle(Java::java.util.UUID, Java::java.util.UUID, Java::java.util.UUID, Java::java.math.BigDecimal, Java::java.lang.String, Java::org.joda.time.LocalDate, Java::com.ning.billing.catalog.api.Currency, Java::com.ning.billing.util.callcontext.CallContext)'
        def insert_external_charge_for_invoice_and_bundle(accountId, invoiceId, bundleId, amount, description, effectiveDate, currency, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !invoiceId.nil? && invoiceId.respond_to? :to_java
            invoiceId = invoiceId.to_java
          end

          if !bundleId.nil? && bundleId.respond_to? :to_java
            bundleId = bundleId.to_java
          end

          if !amount.nil? && amount.respond_to? :to_java
            amount = amount.to_java
          end

          if !description.nil? && description.respond_to? :to_java
            description = description.to_java
          end

          if !effectiveDate.nil? && effectiveDate.respond_to? :to_java
            effectiveDate = effectiveDate.to_java
          end

          if !currency.nil? && currency.respond_to? :to_java
            currency = currency.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.insert_external_charge_for_invoice_and_bundle(accountId, invoiceId, bundleId, amount, description, effectiveDate, currency, context)
            # conversion for res [type = com.ning.billing.invoice.api.InvoiceItem]
            res = Killbill::Plugin::Model::InvoiceItem.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.invoice.api.InvoiceItem getCreditById(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_credit_by_id(creditId, context)
          if !creditId.nil? && creditId.respond_to? :to_java
            creditId = creditId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.get_credit_by_id(creditId, context)
            # conversion for res [type = com.ning.billing.invoice.api.InvoiceItem]
            res = Killbill::Plugin::Model::InvoiceItem.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.invoice.api.InvoiceItem insertCredit(Java::java.util.UUID, Java::java.math.BigDecimal, Java::org.joda.time.LocalDate, Java::com.ning.billing.catalog.api.Currency, Java::com.ning.billing.util.callcontext.CallContext)'
        def insert_credit(accountId, amount, effectiveDate, currency, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !amount.nil? && amount.respond_to? :to_java
            amount = amount.to_java
          end

          if !effectiveDate.nil? && effectiveDate.respond_to? :to_java
            effectiveDate = effectiveDate.to_java
          end

          if !currency.nil? && currency.respond_to? :to_java
            currency = currency.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.insert_credit(accountId, amount, effectiveDate, currency, context)
            # conversion for res [type = com.ning.billing.invoice.api.InvoiceItem]
            res = Killbill::Plugin::Model::InvoiceItem.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.invoice.api.InvoiceItem insertCreditForInvoice(Java::java.util.UUID, Java::java.util.UUID, Java::java.math.BigDecimal, Java::org.joda.time.LocalDate, Java::com.ning.billing.catalog.api.Currency, Java::com.ning.billing.util.callcontext.CallContext)'
        def insert_credit_for_invoice(accountId, invoiceId, amount, effectiveDate, currency, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !invoiceId.nil? && invoiceId.respond_to? :to_java
            invoiceId = invoiceId.to_java
          end

          if !amount.nil? && amount.respond_to? :to_java
            amount = amount.to_java
          end

          if !effectiveDate.nil? && effectiveDate.respond_to? :to_java
            effectiveDate = effectiveDate.to_java
          end

          if !currency.nil? && currency.respond_to? :to_java
            currency = currency.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.insert_credit_for_invoice(accountId, invoiceId, amount, effectiveDate, currency, context)
            # conversion for res [type = com.ning.billing.invoice.api.InvoiceItem]
            res = Killbill::Plugin::Model::InvoiceItem.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.invoice.api.InvoiceItem insertInvoiceItemAdjustment(Java::java.util.UUID, Java::java.util.UUID, Java::java.util.UUID, Java::org.joda.time.LocalDate, Java::com.ning.billing.util.callcontext.CallContext)'
        def insert_invoice_item_adjustment(accountId, invoiceId, invoiceItemId, effectiveDate, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !invoiceId.nil? && invoiceId.respond_to? :to_java
            invoiceId = invoiceId.to_java
          end

          if !invoiceItemId.nil? && invoiceItemId.respond_to? :to_java
            invoiceItemId = invoiceItemId.to_java
          end

          if !effectiveDate.nil? && effectiveDate.respond_to? :to_java
            effectiveDate = effectiveDate.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.insert_invoice_item_adjustment(accountId, invoiceId, invoiceItemId, effectiveDate, context)
            # conversion for res [type = com.ning.billing.invoice.api.InvoiceItem]
            res = Killbill::Plugin::Model::InvoiceItem.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::void deleteCBA(Java::java.util.UUID, Java::java.util.UUID, Java::java.util.UUID, Java::com.ning.billing.util.callcontext.CallContext)'
        def delete_cba(accountId, invoiceId, invoiceItemId, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !invoiceId.nil? && invoiceId.respond_to? :to_java
            invoiceId = invoiceId.to_java
          end

          if !invoiceItemId.nil? && invoiceItemId.respond_to? :to_java
            invoiceItemId = invoiceItemId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          @real_java_api.delete_cba(accountId, invoiceId, invoiceItemId, context)
        end

        java_signature 'Java::java.lang.String getInvoiceAsHTML(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_invoice_as_html(invoiceId, context)
          if !invoiceId.nil? && invoiceId.respond_to? :to_java
            invoiceId = invoiceId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.get_invoice_as_html(invoiceId, context)
            # conversion for res [type = java.lang.String]
            return res
          rescue Java::com.ning.billing.account.api.AccountApiException => e
            raise Killbill::Plugin::Model::AccountApiException.to_ruby(e)
          rescue Java::java.io.IOException => e
            raise ApiException.new("java.io.IOException: #{e.msg if !e.msg.nil?}")
          rescue Java::com.ning.billing.invoice.api.InvoiceApiException => e
            raise Killbill::Plugin::Model::InvoiceApiException.to_ruby(e)
          end
        end

        java_signature 'Java::void consumeExstingCBAOnAccountWithUnpaidInvoices(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.CallContext)'
        def consume_exsting_cba_onaccount_with_unpaid_invoices(accountId, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          @real_java_api.consume_exsting_cba_onaccount_with_unpaid_invoices(accountId, context)
        end
      end
    end
  end
end
