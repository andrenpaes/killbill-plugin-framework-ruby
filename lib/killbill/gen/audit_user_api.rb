###################################################################################
#                                                                                 #
#                   Copyright 2010-2013 Ning, Inc.                                #
#                                                                                 #
#      Ning licenses this file to you under the Apache License, version 2.0       #
#      (the "License"); you may not use this file except in compliance with the   #
#      License.  You may obtain a copy of the License at:                         #
#                                                                                 #
#          http://www.apache.org/licenses/LICENSE-2.0                             #
#                                                                                 #
#      Unless required by applicable law or agreed to in writing, software        #
#      distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  #
#      WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  #
#      License for the specific language governing permissions and limitations    #
#      under the License.                                                         #
#                                                                                 #
###################################################################################


#
#                       DO NOT EDIT!!!
#    File automatically generated by killbill-java-parser (git@github.com:killbill/killbill-java-parser.git)
#


module Killbill
  module Plugin
    module Api

      java_package 'com.ning.billing.util.api'
      class AuditUserApi

        include com.ning.billing.util.api.AuditUserApi

        def initialize(real_java_api)
          @real_java_api = real_java_api
        end


        java_signature 'Java::com.ning.billing.util.audit.AuditLogsForAccount getAuditLogsForAccount(Java::java.util.UUID, Java::com.ning.billing.util.api.AuditLevel, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_audit_logs_for_account(accountId, auditLevel, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !auditLevel.nil? && auditLevel.respond_to? :to_java
            auditLevel = auditLevel.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_audit_logs_for_account(accountId, auditLevel, context)
          # conversion for res [type = com.ning.billing.util.audit.AuditLogsForAccount]
          res = Killbill::Plugin::Model::AuditLogsForAccount.to_ruby(res) if !res.nil?
          return res
        end

        java_signature 'Java::com.ning.billing.util.audit.AuditLogsForBundles getAuditLogsForBundle(Java::java.util.UUID, Java::com.ning.billing.util.api.AuditLevel, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_audit_logs_for_bundle(bundleId, auditLevel, context)
          if !bundleId.nil? && bundleId.respond_to? :to_java
            bundleId = bundleId.to_java
          end

          if !auditLevel.nil? && auditLevel.respond_to? :to_java
            auditLevel = auditLevel.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.get_audit_logs_for_bundle(bundleId, auditLevel, context)
            # conversion for res [type = com.ning.billing.util.audit.AuditLogsForBundles]
            res = Killbill::Plugin::Model::AuditLogsForBundles.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.entitlement.api.timeline.EntitlementRepairException => e
            raise Killbill::Plugin::Model::EntitlementRepairException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.util.audit.AuditLogsForBundles getAuditLogsForBundles(Java::java.util.List, Java::com.ning.billing.util.api.AuditLevel, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_audit_logs_for_bundles(bundles, auditLevel, context)
          if !bundles.nil? && bundles.respond_to? :to_java
            bundles = bundles.to_java
          end

          if !auditLevel.nil? && auditLevel.respond_to? :to_java
            auditLevel = auditLevel.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_audit_logs_for_bundles(bundles, auditLevel, context)
          # conversion for res [type = com.ning.billing.util.audit.AuditLogsForBundles]
          res = Killbill::Plugin::Model::AuditLogsForBundles.to_ruby(res) if !res.nil?
          return res
        end

        java_signature 'Java::com.ning.billing.util.audit.AuditLogsForInvoicePayments getAuditLogsForInvoicePayments(Java::java.util.List, Java::com.ning.billing.util.api.AuditLevel, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_audit_logs_for_invoice_payments(invoicePayments, auditLevel, context)
          if !invoicePayments.nil? && invoicePayments.respond_to? :to_java
            invoicePayments = invoicePayments.to_java
          end

          if !auditLevel.nil? && auditLevel.respond_to? :to_java
            auditLevel = auditLevel.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_audit_logs_for_invoice_payments(invoicePayments, auditLevel, context)
          # conversion for res [type = com.ning.billing.util.audit.AuditLogsForInvoicePayments]
          res = Killbill::Plugin::Model::AuditLogsForInvoicePayments.to_ruby(res) if !res.nil?
          return res
        end

        java_signature 'Java::com.ning.billing.util.audit.AuditLogsForRefunds getAuditLogsForRefunds(Java::java.util.List, Java::com.ning.billing.util.api.AuditLevel, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_audit_logs_for_refunds(refunds, auditLevel, context)
          if !refunds.nil? && refunds.respond_to? :to_java
            refunds = refunds.to_java
          end

          if !auditLevel.nil? && auditLevel.respond_to? :to_java
            auditLevel = auditLevel.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_audit_logs_for_refunds(refunds, auditLevel, context)
          # conversion for res [type = com.ning.billing.util.audit.AuditLogsForRefunds]
          res = Killbill::Plugin::Model::AuditLogsForRefunds.to_ruby(res) if !res.nil?
          return res
        end

        java_signature 'Java::com.ning.billing.util.audit.AuditLogsForPayments getAuditLogsForPayments(Java::java.util.List, Java::com.ning.billing.util.api.AuditLevel, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_audit_logs_for_payments(payments, auditLevel, context)
          if !payments.nil? && payments.respond_to? :to_java
            payments = payments.to_java
          end

          if !auditLevel.nil? && auditLevel.respond_to? :to_java
            auditLevel = auditLevel.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_audit_logs_for_payments(payments, auditLevel, context)
          # conversion for res [type = com.ning.billing.util.audit.AuditLogsForPayments]
          res = Killbill::Plugin::Model::AuditLogsForPayments.to_ruby(res) if !res.nil?
          return res
        end

        java_signature 'Java::com.ning.billing.util.audit.AuditLogsForInvoices getAuditLogsForInvoices(Java::java.util.List, Java::com.ning.billing.util.api.AuditLevel, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_audit_logs_for_invoices(invoices, auditLevel, context)
          if !invoices.nil? && invoices.respond_to? :to_java
            invoices = invoices.to_java
          end

          if !auditLevel.nil? && auditLevel.respond_to? :to_java
            auditLevel = auditLevel.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_audit_logs_for_invoices(invoices, auditLevel, context)
          # conversion for res [type = com.ning.billing.util.audit.AuditLogsForInvoices]
          res = Killbill::Plugin::Model::AuditLogsForInvoices.to_ruby(res) if !res.nil?
          return res
        end

        java_signature 'Java::java.util.List getAuditLogs(Java::java.util.UUID, Java::com.ning.billing.ObjectType, Java::com.ning.billing.util.api.AuditLevel, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_audit_logs(objectId, objectType, auditLevel, context)
          if !objectId.nil? && objectId.respond_to? :to_java
            objectId = objectId.to_java
          end

          if !objectType.nil? && objectType.respond_to? :to_java
            objectType = objectType.to_java
          end

          if !auditLevel.nil? && auditLevel.respond_to? :to_java
            auditLevel = auditLevel.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_audit_logs(objectId, objectType, auditLevel, context)
          # conversion for res [type = java.util.List]
          tmp = []
          res.each do |m|
            # conversion for m [type = com.ning.billing.util.audit.AuditLog]
            m = Killbill::Plugin::Model::AuditLog.to_ruby(m) if !m.nil?
            tmp << m
          end
          res = tmp
          return res
        end
      end
    end
  end
end
