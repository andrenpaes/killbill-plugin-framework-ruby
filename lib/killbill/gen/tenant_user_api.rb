###################################################################################
#                                                                                 #
#                   Copyright 2010-2013 Ning, Inc.                                #
#                                                                                 #
#      Ning licenses this file to you under the Apache License, version 2.0       #
#      (the "License"); you may not use this file except in compliance with the   #
#      License.  You may obtain a copy of the License at:                         #
#                                                                                 #
#          http://www.apache.org/licenses/LICENSE-2.0                             #
#                                                                                 #
#      Unless required by applicable law or agreed to in writing, software        #
#      distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  #
#      WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  #
#      License for the specific language governing permissions and limitations    #
#      under the License.                                                         #
#                                                                                 #
###################################################################################


#
#                       DO NOT EDIT!!!
#    File automatically generated by killbill-java-parser (git@github.com:killbill/killbill-java-parser.git)
#


module Killbill
  module Plugin
    module Api

      java_package 'com.ning.billing.tenant.api'
      class TenantUserApi

        include com.ning.billing.tenant.api.TenantUserApi

        def initialize(real_java_api)
          @real_java_api = real_java_api
        end


        java_signature 'Java::com.ning.billing.tenant.api.Tenant createTenant(Java::com.ning.billing.tenant.api.TenantData, Java::com.ning.billing.util.callcontext.CallContext)'
        def create_tenant(data, context)
          if !data.nil? && data.respond_to? :to_java
            data = data.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.create_tenant(data, context)
            # conversion for res [type = com.ning.billing.tenant.api.Tenant]
            res = Killbill::Plugin::Model::Tenant.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.tenant.api.TenantApiException => e
            raise Killbill::Plugin::Model::TenantApiException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.tenant.api.Tenant getTenantByApiKey(Java::java.lang.String)'
        def get_tenant_by_api_key(key)
          if !key.nil? && key.respond_to? :to_java
            key = key.to_java
          end

          begin
            res = @real_java_api.get_tenant_by_api_key(key)
            # conversion for res [type = com.ning.billing.tenant.api.Tenant]
            res = Killbill::Plugin::Model::Tenant.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.tenant.api.TenantApiException => e
            raise Killbill::Plugin::Model::TenantApiException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.tenant.api.Tenant getTenantById(Java::java.util.UUID)'
        def get_tenant_by_id(tenantId)
          if !tenantId.nil? && tenantId.respond_to? :to_java
            tenantId = tenantId.to_java
          end

          begin
            res = @real_java_api.get_tenant_by_id(tenantId)
            # conversion for res [type = com.ning.billing.tenant.api.Tenant]
            res = Killbill::Plugin::Model::Tenant.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.tenant.api.TenantApiException => e
            raise Killbill::Plugin::Model::TenantApiException.to_ruby(e)
          end
        end

        java_signature 'Java::java.util.List getTenantValueForKey(Java::java.lang.String, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_tenant_value_for_key(key, context)
          if !key.nil? && key.respond_to? :to_java
            key = key.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.get_tenant_value_for_key(key, context)
            # conversion for res [type = java.util.List]
            tmp = []
            res.each do |m|
              # conversion for m [type = java.lang.String]
              tmp << m
            end
            res = tmp
            return res
          rescue Java::com.ning.billing.tenant.api.TenantApiException => e
            raise Killbill::Plugin::Model::TenantApiException.to_ruby(e)
          end
        end

        java_signature 'Java::void addTenantKeyValue(Java::java.lang.String, Java::java.lang.String, Java::com.ning.billing.util.callcontext.CallContext)'
        def add_tenant_key_value(key, value, context)
          if !key.nil? && key.respond_to? :to_java
            key = key.to_java
          end

          if !value.nil? && value.respond_to? :to_java
            value = value.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          @real_java_api.add_tenant_key_value(key, value, context)
        end

        java_signature 'Java::void deleteTenantKey(Java::java.lang.String, Java::com.ning.billing.util.callcontext.CallContext)'
        def delete_tenant_key(key, context)
          if !key.nil? && key.respond_to? :to_java
            key = key.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          @real_java_api.delete_tenant_key(key, context)
        end
      end
    end
  end
end
