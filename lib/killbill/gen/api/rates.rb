###################################################################################
#                                                                                 #
#                   Copyright 2010-2013 Ning, Inc.                                #
#                                                                                 #
#      Ning licenses this file to you under the Apache License, version 2.0       #
#      (the "License"); you may not use this file except in compliance with the   #
#      License.  You may obtain a copy of the License at:                         #
#                                                                                 #
#          http://www.apache.org/licenses/LICENSE-2.0                             #
#                                                                                 #
#      Unless required by applicable law or agreed to in writing, software        #
#      distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  #
#      WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  #
#      License for the specific language governing permissions and limitations    #
#      under the License.                                                         #
#                                                                                 #
###################################################################################


#
#                       DO NOT EDIT!!!
#    File automatically generated by killbill-java-parser (git@github.com:killbill/killbill-java-parser.git)
#


module Killbill
  module Plugin
    module Model

      java_package 'com.ning.billing.currency.api'
      class Rates

        include com.ning.billing.currency.api.Rates

        attr_accessor :currencies, :rate

        def initialize()
        end

        def to_java()
          # conversion for currencies [type = java.util.Set]
          tmp = java.util.TreeSet.new
          (@currencies || []).each do |m|
            # conversion for m [type = com.ning.billing.catalog.api.Currency]
            m = Java::com.ning.billing.catalog.api.Currency.value_of("#{m.to_s}") unless m.nil?
            tmp.add(m)
          end
          @currencies = tmp

          # conversion for rate [type = java.math.BigDecimal]
          if @rate.nil?
            @rate = java.math.BigDecimal::ZERO
          else
            @rate = java.math.BigDecimal.new(@rate.to_s)
          end
          self
        end

        def to_ruby(j_obj)
          # conversion for currencies [type = java.util.Set]
          @currencies = j_obj.currencies
          tmp = []
          (@currencies || []).each do |m|
            # conversion for m [type = com.ning.billing.catalog.api.Currency]
            m = m.to_s.to_sym unless m.nil?
            tmp << m
          end
          @currencies = tmp

          # conversion for rate [type = java.math.BigDecimal]
          @rate = j_obj.rate
          @rate = @rate.nil? ? 0 : BigDecimal.new(@rate.to_s)
          self
        end

      end
    end
  end
end
