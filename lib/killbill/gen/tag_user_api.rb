###################################################################################
#                                                                                 #
#                   Copyright 2010-2013 Ning, Inc.                                #
#                                                                                 #
#      Ning licenses this file to you under the Apache License, version 2.0       #
#      (the "License"); you may not use this file except in compliance with the   #
#      License.  You may obtain a copy of the License at:                         #
#                                                                                 #
#          http://www.apache.org/licenses/LICENSE-2.0                             #
#                                                                                 #
#      Unless required by applicable law or agreed to in writing, software        #
#      distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  #
#      WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  #
#      License for the specific language governing permissions and limitations    #
#      under the License.                                                         #
#                                                                                 #
###################################################################################


#
#                       DO NOT EDIT!!!
#    File automatically generated by killbill-java-parser (git@github.com:killbill/killbill-java-parser.git)
#


module Killbill
  module Plugin
    module Api

      java_package 'com.ning.billing.util.api'
      class TagUserApi

        include com.ning.billing.util.api.TagUserApi

        def initialize(real_java_api)
          @real_java_api = real_java_api
        end


        java_signature 'Java::java.util.List getTagDefinitions(Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_tag_definitions(context)
          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_tag_definitions(context)
          # conversion for res [type = java.util.List]
          tmp = []
          res.each do |m|
            # conversion for m [type = com.ning.billing.util.tag.TagDefinition]
            m = Killbill::Plugin::Model::TagDefinition.to_ruby(m) if !m.nil?
            tmp << m
          end
          res = tmp
          return res
        end

        java_signature 'Java::com.ning.billing.util.tag.TagDefinition createTagDefinition(Java::java.lang.String, Java::java.lang.String, Java::com.ning.billing.util.callcontext.CallContext)'
        def create_tag_definition(definitionName, description, context)
          if !definitionName.nil? && definitionName.respond_to? :to_java
            definitionName = definitionName.to_java
          end

          if !description.nil? && description.respond_to? :to_java
            description = description.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.create_tag_definition(definitionName, description, context)
            # conversion for res [type = com.ning.billing.util.tag.TagDefinition]
            res = Killbill::Plugin::Model::TagDefinition.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.util.api.TagDefinitionApiException => e
            raise Killbill::Plugin::Model::TagDefinitionApiException.to_ruby(e)
          end
        end

        java_signature 'Java::void deleteTagDefinition(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.CallContext)'
        def delete_tag_definition(tagDefinitionId, context)
          if !tagDefinitionId.nil? && tagDefinitionId.respond_to? :to_java
            tagDefinitionId = tagDefinitionId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          @real_java_api.delete_tag_definition(tagDefinitionId, context)
        end

        java_signature 'Java::com.ning.billing.util.tag.TagDefinition getTagDefinition(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_tag_definition(tagDefinitionId, context)
          if !tagDefinitionId.nil? && tagDefinitionId.respond_to? :to_java
            tagDefinitionId = tagDefinitionId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.get_tag_definition(tagDefinitionId, context)
            # conversion for res [type = com.ning.billing.util.tag.TagDefinition]
            res = Killbill::Plugin::Model::TagDefinition.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.util.api.TagDefinitionApiException => e
            raise Killbill::Plugin::Model::TagDefinitionApiException.to_ruby(e)
          end
        end

        java_signature 'Java::com.ning.billing.util.tag.TagDefinition getTagDefinitionForName(Java::java.lang.String, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_tag_definition_for_name(tageDefinitionName, context)
          if !tageDefinitionName.nil? && tageDefinitionName.respond_to? :to_java
            tageDefinitionName = tageDefinitionName.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          begin
            res = @real_java_api.get_tag_definition_for_name(tageDefinitionName, context)
            # conversion for res [type = com.ning.billing.util.tag.TagDefinition]
            res = Killbill::Plugin::Model::TagDefinition.to_ruby(res) if !res.nil?
            return res
          rescue Java::com.ning.billing.util.api.TagDefinitionApiException => e
            raise Killbill::Plugin::Model::TagDefinitionApiException.to_ruby(e)
          end
        end

        java_signature 'Java::void addTags(Java::java.util.UUID, Java::com.ning.billing.ObjectType, Java::java.util.Collection, Java::com.ning.billing.util.callcontext.CallContext)'
        def add_tags(objectId, objectType, tagDefinitionIds, context)
          if !objectId.nil? && objectId.respond_to? :to_java
            objectId = objectId.to_java
          end

          if !objectType.nil? && objectType.respond_to? :to_java
            objectType = objectType.to_java
          end

          if !tagDefinitionIds.nil? && tagDefinitionIds.respond_to? :to_java
            tagDefinitionIds = tagDefinitionIds.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          @real_java_api.add_tags(objectId, objectType, tagDefinitionIds, context)
        end

        java_signature 'Java::void addTag(Java::java.util.UUID, Java::com.ning.billing.ObjectType, Java::java.util.UUID, Java::com.ning.billing.util.callcontext.CallContext)'
        def add_tag(objectId, objectType, tagDefinitionId, context)
          if !objectId.nil? && objectId.respond_to? :to_java
            objectId = objectId.to_java
          end

          if !objectType.nil? && objectType.respond_to? :to_java
            objectType = objectType.to_java
          end

          if !tagDefinitionId.nil? && tagDefinitionId.respond_to? :to_java
            tagDefinitionId = tagDefinitionId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          @real_java_api.add_tag(objectId, objectType, tagDefinitionId, context)
        end

        java_signature 'Java::void removeTags(Java::java.util.UUID, Java::com.ning.billing.ObjectType, Java::java.util.Collection, Java::com.ning.billing.util.callcontext.CallContext)'
        def remove_tags(objectId, objectType, tagDefinitions, context)
          if !objectId.nil? && objectId.respond_to? :to_java
            objectId = objectId.to_java
          end

          if !objectType.nil? && objectType.respond_to? :to_java
            objectType = objectType.to_java
          end

          if !tagDefinitions.nil? && tagDefinitions.respond_to? :to_java
            tagDefinitions = tagDefinitions.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          @real_java_api.remove_tags(objectId, objectType, tagDefinitions, context)
        end

        java_signature 'Java::void removeTag(Java::java.util.UUID, Java::com.ning.billing.ObjectType, Java::java.util.UUID, Java::com.ning.billing.util.callcontext.CallContext)'
        def remove_tag(objectId, objectType, tagDefinitionId, context)
          if !objectId.nil? && objectId.respond_to? :to_java
            objectId = objectId.to_java
          end

          if !objectType.nil? && objectType.respond_to? :to_java
            objectType = objectType.to_java
          end

          if !tagDefinitionId.nil? && tagDefinitionId.respond_to? :to_java
            tagDefinitionId = tagDefinitionId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          @real_java_api.remove_tag(objectId, objectType, tagDefinitionId, context)
        end

        java_signature 'Java::java.util.List getTagsForObject(Java::java.util.UUID, Java::com.ning.billing.ObjectType, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_tags_for_object(objectId, objectType, context)
          if !objectId.nil? && objectId.respond_to? :to_java
            objectId = objectId.to_java
          end

          if !objectType.nil? && objectType.respond_to? :to_java
            objectType = objectType.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_tags_for_object(objectId, objectType, context)
          # conversion for res [type = java.util.List]
          tmp = []
          res.each do |m|
            # conversion for m [type = com.ning.billing.util.tag.Tag]
            m = Killbill::Plugin::Model::Tag.to_ruby(m) if !m.nil?
            tmp << m
          end
          res = tmp
          return res
        end

        java_signature 'Java::java.util.List getTagsForAccountType(Java::java.util.UUID, Java::com.ning.billing.ObjectType, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_tags_for_account_type(accountId, objectType, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !objectType.nil? && objectType.respond_to? :to_java
            objectType = objectType.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_tags_for_account_type(accountId, objectType, context)
          # conversion for res [type = java.util.List]
          tmp = []
          res.each do |m|
            # conversion for m [type = com.ning.billing.util.tag.Tag]
            m = Killbill::Plugin::Model::Tag.to_ruby(m) if !m.nil?
            tmp << m
          end
          res = tmp
          return res
        end

        java_signature 'Java::java.util.List getTagsForAccount(Java::java.util.UUID, Java::com.ning.billing.util.callcontext.TenantContext)'
        def get_tags_for_account(accountId, context)
          if !accountId.nil? && accountId.respond_to? :to_java
            accountId = accountId.to_java
          end

          if !context.nil? && context.respond_to? :to_java
            context = context.to_java
          end

          res = @real_java_api.get_tags_for_account(accountId, context)
          # conversion for res [type = java.util.List]
          tmp = []
          res.each do |m|
            # conversion for m [type = com.ning.billing.util.tag.Tag]
            m = Killbill::Plugin::Model::Tag.to_ruby(m) if !m.nil?
            tmp << m
          end
          res = tmp
          return res
        end
      end
    end
  end
end
